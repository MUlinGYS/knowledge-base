* {
	padding: 0px;
	margin: 0px;
}

p {
	text-indent: 2em; /* 段落文本首行缩进两个字符 */
	/* em是相对单位，1em等于当前元素的字体大小，如果未对字体大小进行设置，则默认为浏览器的默认字体大小，通常为16px。需要注意的是
	，该属性只对块级元素中的首行文本有效，对于内联元素则无效。并且，该属性只能用于左右缩进，对于上下缩进无效。 */
}

.fix {
	content: ""; /* 生成一个内容为空的元素 */ 
	/* 伪元素content，它用于与:before或:after选择器一起使用，在元素的内容前后插入内容。在此，它被用来清理浮动，我们创建一个空的内容，".fix"类将应用于浮动元素的父元素，这样就可以包含浮动的子元素，防止出现父元素高度塌陷的问题。 */
	
	/* 
	display的几个常用的属性值：inline，block，inline-block,flex

	display:inline;
	1.将元素改变为行内元素（此时宽高不可设置，只能由内容的多少来改变）；
	2.由块级元素霸道独占一行的行为，改为：与其他行内元素共享一行；
	3.可以使用padding，margin的left和right产生边距效果，但是top和bottom就不行。

	display:block;
	1.将元素改变为块级元素（此时宽高可设置）；
	2.由行内元素共享一行的行为，改为：非常霸道的独占一行；
	3.可以设置padding，margin的各个属性值，top，left，bottom，right都能够产生边距效果。 

	display:inline-block;
	内联块状元素“inline-block”（表现为块级元素的行内元素）；也就是 inline 和 block 的混合产物。但并不是所有属性都继承，而是部分属性（继承两者优良属性，就像袁隆平爷爷培育出杂交水稻）：
	1.能和其他元素共享一行；
	2.可以设置宽、高；
	3.可以设置padding，margin的各个属性值，top，left，bottom，right都能够产生边距效果。

	*/

	/* 在大多数开发环境中， 基本不用table元素来做网页布局了，取而代之的是div+css 
		用DIV+CSS编写出来的文件k数比用table写出来的要小，不信你在页面中放1000个table和1000个div比比看哪个文件大。
		table必须在页面完全加载后才显示，没有加载完毕前，table为一片空白，也就是说，需要页面完毕才显示，而div是逐行显示，不需要页面完全加载完毕，就可以一边加载一边显示。
		非表格内容用table来装，不符合标签语义化要求，不利于SEO。
		table的嵌套性太多，用DIV代码会比较简洁
	*/

	/* 考虑兼容性，不能因为inline-block优点多多就可以随便用 */
	display: table; /* 会展示为表格 */
	/* display 控制元素渲染的内容呈现方式 —— 既然CSS层叠样式表的全称（Cascading Style Sheets）包含“样式”（Style）和“表”（Sheets），那么“表别样式”就一定是CSS设定中最基本的设定，CSS为我们提供了多种的 display 值供我们使用，每一种值都让元素以不同的方式表现，table 让元素呈现类似 HTML <table> 表格的显示。*/
	clear: both;/* 清除元素的左右浮动 */
	/* clear 属性规定元素的某一侧（如：左，右，或者两侧）不允许其他元素浮动。在此，clear:both表示不允许元素的左右两侧有浮动元素，即清除元素的左右两浮动。常用于浮动布局，防止高度塌陷。 */
}

.head {
	height: 380px;
	background-color: #395692;
	width: 100%;
}


.tl {
	font-family: sans-serif; /* 设置元素的字体为无衬线字体 */
	/* font-family 属性设置元素的字体族，理解字体族的概念非常重要，它表示一组具有相似设计特性的字体共享同一个名称。浏览器将尽可能地使用指定的字体，但如果它没有安装，它就会使用默认的字体。 在此设置元素使用无衬线字体 */
		/* 衬线字体，字形设计细节精致，笔画开始和结束处有额外的装饰，像是书法笔划引入和结束的地方，特别适合打印媒体阅读，常见的衬线字体有 Times New Roman 和 Georgia */
		/* 无衬线字体，字形设计比较简洁，没有额外的装饰，适合在屏幕阅读，常见的无衬线字体有 Arial 和 Verdana等 */
		/* 一般而言，英文类型的无衬线字体在小号字情况下，相较于有衬线的字体来 */
	color: white;
	font-size: 18px;
	font-weight: 800;  /* 字体粗细 */
	margin-left: 20px;
}

.t2 {
	font-family: "微软雅黑";
	color: white;
	font-size: 46px;
	font-weight: 800;
	letter-spacing: 10px;  /* 设置元素文字之间的间距为 10px */
    width: 340px;
	width: 340px;
	height: 80px;
	text-align: center;
}

.t3 {
	width: 340px;
	height: 40px;
	border-top: 4px solid white;
	font-family: "微软雅黑";
	color: white;
	font-size: 20px;
	font-weight: 500;
	text-align: center;
	letter-spacing: 5px;
	margin-top: 10px;
}

.tt {
	top: 100px;
	margin: 80px auto;
	width: 340px;
	height: 100px;
}

.item {
	width: 60%;
	margin-bottom: 30px;
	border-bottom: 1px solid gainsboro;
}

.text_en {
	font-family: "lora", "times new roman";
	font-size: 18px;
	font-weight: 400px;
	margin-bottom: 10px;
	color: #808080;
}

.content {
	width: 100%;
	height: 125vh;
	display: flex;
	justify-content: center;
}

/* 卡片 */
.box-main {
	display: flex;
	width: 100%;
	height: auto;
	justify-content: space-evenly;
	/* 
	当将元素设置为display: flex;时，会启用弹性布局，所有的子元素成为flex item。
	justify-content属性定义了项目在主轴上的对齐方式。
	justify-content: flex-start: 主轴的开始位置对齐。
	justify-content: flex-end: 主轴的结束位置对齐。
	justify-content: center: 主轴的中间位置对齐。
	justify-content: space-between: 项目之间留有空白，首尾项目紧贴容器边缘。
	justify-content: space-around: 项目两侧均留有空白，项目之间的空白等于项目与容器边界的空白。

	align-items属性定义了项目在交叉轴上的对齐方式。
	align-items: flex-start: 交叉轴的开始位置对齐。
	align-items: flex-end: 交叉轴的结束位置对齐。
	align-items: center: 交叉轴的中间位置对齐。
	align-items: baseline: 项目基线对齐。
	align-items: stretch: 如果项目未设置高度或设为auto，则占满全幅。

	flex-direction属性决定了主轴的方向（即项目的排列方向）。
	flex-direction: row: 主轴为水平方向，开始位置在容器的左端。
	flex-direction: row-reverse: 主轴为水平方向，开始位置在容器的右端。
	flex-direction: column: 主轴为垂直方向，开始位置在容器的上端。
	flex-direction: column-reverse: 主轴为垂直方向，开始位置在容器的下端。

	flex-wrap属性定义了如果一条轴线装不下，如何换行。
	flex-wrap: nowrap: 不换行。
	flex-wrap: wrap: 换行，第一行在上方。
	flex-wrap: wrap-reverse: 换行，第一行在下方。
	flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。

	align-content属性定义了多根轴线的对齐方式，如果只有一根轴线，该属性不起作用。
	在每个项目上，可以应用以下两个属性：
	order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。
	flex属性是flex-grow，flex-shrink和 flex-basis 属性的简写，默认值为0 1 auto。
	 */
}

.bounce-in-fwd {
	width: 10rem;
	height: 10rem;
	margin: 0 20px;
	border-radius: 10px;
	background-color: #ffffff;
	-webkit-animation: bounce-in-fwd 1.1s; /* 元素应用 bounce-in-fwd 的动画，持续时间为 1.1s  */
	animation: bounce-in-fwd 1.1s;
	box-shadow:
		2.8px 2.8px 2.2px rgba(0, 0, 0, 0.02),
		6.7px 6.7px 5.3px rgba(0, 0, 0, 0.028),
		12.5px 12.5px 10px rgba(0, 0, 0, 0.035),
		22.3px 22.3px 17.9px rgba(0, 0, 0, 0.042),
		41.8px 41.8px 33.4px rgba(0, 0, 0, 0.05),
		100px 100px 80px rgba(0, 0, 0, 0.07);

	background: linear-gradient(145deg, #cacaca, #f0f0f0);/* 设置 元素的背景为从 #cacaca 到 #f0f0f0 的线性渐变 */
	/* box-shadow: 29px 29px 69px #7d7d7d,
	-29px -29px 69px #ffffff; */
}

/* ----------------------------------------------
* Generated by Animista on 2024-4-11 11:43:48
* Licensed under FreeBSD License.
* See http://animista.net/license for more info. 
* w: http://animista.net, t: @cssanimista
* ---------------------------------------------- */

/**
* ----------------------------------------
* animation bounce-in-fwd
* ----------------------------------------
*/
@-webkit-keyframes bounce-in-fwd {
	0% {
		/* 初始状态，元素尺寸缩小到0，透明度为0 */
		/* -webkit- 这个前缀是为了兼容旧版本的 WebKit 浏览器 */
		-webkit-transform: scale(0);
		/* transform将元素的尺寸缩小到 0 */
		transform: scale(0);
		opacity: 0;
		/* opacity的作用是改变元素的透明度 */
		opacity: 0;
	}

	38% {
		/* 元素尺寸恢复到1，透明度为1 */
		-webkit-transform: scale(1);
		transform: scale(1);
		opacity: 1;
	}

	55% {
		/* 元素尺寸缩小到0.7 */
		-webkit-transform: scale(0.7);
		transform: scale(0.7);
	}

	72% {
		/* 元素尺寸恢复到1 */
		-webkit-transform: scale(1);
		transform: scale(1);
	}

	81% {
		/* 元素尺寸缩小到0.84 */
		-webkit-transform: scale(0.84);
		transform: scale(0.84);
	}

	89% {
		/* 元素尺寸恢复到1 */
		-webkit-transform: scale(1);
		transform: scale(1);
	}

	95% {
		/* 元素尺寸缩小到0.95 */
		-webkit-transform: scale(0.95);
		transform: scale(0.95);
	}

	100% {
		/* 最后状态，元素尺寸恢复到1，完全停止动画 */
		-webkit-transform: scale(1);
		transform: scale(1);
	}
}


@keyframes bounce-in-fwd {
	0% {
		-webkit-transform: scale(0);
		transform: scale(0);
		-webkit-animation-timing-function: ease-in;
		animation-timing-function: ease-in;
		opacity: 0;
	}

	38% {
		-webkit-transform: scale(1);
		transform: scale(1);
		-webkit-animation-timing-function: ease-out;
		animation-timing-function: ease-out;
		opacity: 1;
	}

	55% {
		-webkit-transform: scale(0.7);
		transform: scale(0.7);
		-webkit-animation-timing-function: ease-in;
		animation-timing-function: ease-in;
	}

	72% {
		-webkit-transform: scale(1);
		transform: scale(1);
		-webkit-animation-timing-function: ease-out;
		animation-timing-function: ease-out;
	}

	81% {
		-webkit-transform: scale(0.84);
		transform: scale(0.84);
		-webkit-animation-timing-function: ease-in;
		animation-timing-function: ease-in;
	}

	89% {
		-webkit-transform: scale(1);
		transform: scale(1);
		-webkit-animation-timing-function: ease-out;
		animation-timing-function: ease-out;
	}

	95% {
		-webkit-transform: scale(0.95);
		transform: scale(0.95);
		-webkit-animation-timing-function: ease-in;
		animation-timing-function: ease-in;
	}

	100% {
		-webkit-transform: scale(1);
		transform: scale(1);
		-webkit-animation-timing-function: ease-out;
		animation-timing-function: ease-out;
	}
}